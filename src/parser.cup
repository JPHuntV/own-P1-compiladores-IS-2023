package src;
import java_cup.runtime.Symbol;

parser code{:
    public String resultado = "";
:}





action code {::}

/*---------------------------declaraciones------------------------*/

terminal REXC, ARROBA, HASH, DOLLAR, PORCIENTO, CONJ, AND, MULT, LPAREN, RPAREN, 
            MENOS, GUIONBAJO, MAS, ASIGNACION, LBRACKET, RBRACKET, LBRACE, RBRACE, 
            SEMICOLON, DOSPUNTOS, COMILLASIM, COMILLADOB, COMA, PUNTO, MENOR, MAYOR, 
            RINTERRO, DIV, PIPE, SLASH, MENORIGUAL, MAYORIGUAL, EQUAL, NOTEQUAL, POTENCIA, 
            MODULO, INCREMENTO, DECREMENTO, NOT, INT, FLOAT, STRING, CHAR, ARRAY, BOOL, 
            MAIN, TRUE, FALSE, IF, ELIF, ELSE, WHILE, DO, FOR, RETURN, BREAK, LCOMENTB, 
            RCOMENTB;

terminal String numero, letra, simbolo, floatN, IDENTIFICADOR;


non terminal  inicio, programa, funciones, main,bloque, declaraFuncion, comentario, 
                identificador, operando, llamaFuncion, expr, prueba, epsilon, break, 
            intLiteral, floatLiteral, stringLiteral, charLiteral, boolLiteral, tipo;
//precedencia
precedence left MAS, MENOS;
precedence left MULT, DIV;

start with inicio;



inicio ::= expr:e {: RESULT = e; :};


programa ::= main
    | funciones main
    | main funciones
    | funciones main funciones
    ;

main ::= INT MAIN LPAREN RPAREN LBRACE bloque RBRACE ;


funciones ::= funciones declaraFuncion
    | declaraFuncion
    | comentario
    ;


identificador ::= IDENTIFICADOR;

operando ::= identificador
    | numero
    | llamaFuncion
    ;

break ::= BREAK;

expresion ::= expresionRelLog
    |expresionAux
    ;

expresionAux ::= expresionAux opSuma termino
    |termino
    ;

termino ::= termino opMult factor
    | factor
    ;

factor ::= operadorUnario valor
    | valor
    ;

valor ::= intLiteral
    | floatLiteral
    |stringLiteral
    |charLiteral
    |boolLiteral
    |identificador
    |identificador array
    |llamaFuncion
    ;

opSuma ::= MAS | MENOS ;

opMult ::= MULT 
    | POTENCIA 
    | DIV 
    | MODULO
    ;

opRelacional ::= MENOR
    | MENORIGUAL
    | MAYOR
    | MAYORIGUAL
    | EQUAL
    | EQUAL boolLiteral
    | NOTEQUAL
    | NOTEQUAL boolLiteral
    ;

operadorArit ::= opSuma | opMult;

operadorUnario ::= MENOS
    | INCREMENTO
    | DECREMENTO
    ;

operadorLogico ::= CONJ
    |HASH
    |REXC
    |NOT
    ;

expresionAritmetica ::= operandoArit 
    | expresionAritmetica operadorArit operandoArit
    ;

expresionRelacional ::= operandoRel opRelacional operandoRel ;

expresionLogica ::= terminoLogico
    | expresionLogica operadorLogico terminoLogico
    | terminoLogico operadorLogico expresionLogica
    ;

expresionRelLog ::= expresionRelacional | expresionLogica ;


terminoLogico ::= operandoArit
    | boolLiteral
    | LPAREN expresionRelacional RPAREN
    | expresionRelacional
    ;

operandoArit ::= identificador 
    | intLiteral 
    | floatLiteral 
    | llamaFuncion
    ;

operandoRel ::= operandoArit 
    | LPAREN expresionAritmetica RPAREN
    ;

//literales
intLiteral ::= numero;
floatLiteral ::= floatN;
stringLiteral ::= charLiteral | stringLiteral charLiteral;
charLiteral ::= COMILLASIM letra COMILLASIM 
                | COMILLASIM numero COMILLASIM
                | COMILLASIM simbolo COMILLASIM
                ;
boolLiteral ::= TRUE | FALSE;

array ::= array COMA expresion
    | expresion
    ;

//estructuras de control
if ::= IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE
    | IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE elif
    | IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE elif ELSE LBRACE bloque RBRACE
    | IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE ELSE LBRACE bloque RBRACE
    ;

elif ::= ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE
    | elif ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE
    ;

while ::= WHILE LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE ;

doWhile ::= DO LBRACE bloque RBRACE WHILE LPAREN expresionRelLog RPAREN DOLLAR ;

for ::= FOR LPAREN declaraVar expresionRelLog DOLLAR expresion RPAREN LBRACE bloque RBRACE ;

estructuraControl ::=  if 
    | while 
    | doWhile 
    | for
    ;

return ::= RETURN expresion ;

break ::= BREAK ;

argumentos ::= expresion
    | argumentos COMA expresion
    ;

llamaFuncion ::= identificador LPAREN RPAREN DOLLAR
    | identificador LPAREN RPAREN
    | identificador LPAREN argumentos RPAREN DOLLAR
    | identificador LPAREN argumentos RPAREN
    | lectura
    | escritura
    ;

asignacion ::= identificador ASIGNACION expresion DOLLAR ;

sentencia ::= asignacion 
    | llamaFuncion DOLLAR
    | estructuraControl 
    | expresion DOLLAR
    | expresionLogica
    | expresionRelacional
    | expresionRelLog
    | declaraVar DOLLAR
    | return DOLLAR
    | return
    | break DOLLAR
    | comentario
    ;

bloque ::= sentencia
    | bloque sentencia
    | sentencia bloque
    ;

parametros ::= tipo identificador
    | parametros COMA tipo identificador
    ;

declaraFuncion ::= tipo identificador LPAREN parametros RPAREN LBRACE bloque RBRACE
    | tipo identificador LPAREN RPAREN LBRACE bloque RBRACE
    ;

tipo ::= INT
    |FLOAT
    |STRING
    |CHAR
    |ARRAY
    |BOOL
    ;

declaraArray ::= (INT | CHAR) identificador declaraArrayAux DOLLAR ;

declaraArrayAux ::= LBRACKET numero RBRACKET
    | LBRACKET numero RBRACKET declaraArrayAux
    ;

declaraVar ::= tipo identificador declaraArrayAux ASIGNACION expresion
    | tipo identificador ASIGNACION expresion
    ;

getValorArray ::= identificador declaraArrayAux DOLLAR
    | identificador declaraArrayAux
    ;

setValorArray ::= getValorArray ASIGNACION expresion ;

lectura ::= leer LPAREN numerico expresion RPAREN DOLLAR ;

numerico ::= intLiteral | floatLiteral ;

escritura ::= escribir LPAREN expresion RPAREN DOLLAR ;

comentario ::= ARROBA stringLiteral
    | LCOMENTB stringLiteral RCOMENTB
    ;
