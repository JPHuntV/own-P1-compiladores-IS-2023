package src;
import java_cup.runtime.*;


import java.util.Stack;
import java.util.ArrayList;
import java.util.List;
parser code {:

    FormalParameterList listaParametros = new FormalParameterList();
    FormalParameterList listaVariables = new FormalParameterList();

    List<Function> functions = new ArrayList<Function>();
    SymbolTableStack symbolTables = new SymbolTableStack();
    
    private Boolean existeFuncion(String nombre){
        for(Function funcion : functions){
            if(funcion.getName() == nombre){
                return true;
            }
        }
        return false;
    }

    public SymbolTableStack getSymbolTableStack() {
        return symbolTables;
    }

    private Boolean existeSimbolo(String nombre){
        Boolean existe = false;
        for(FormalParameter param : listaParametros.getParams()){
            if(param.getName() == nombre){
                existe =  true;
            }
        }
        for(FormalParameter param : listaVariables.getParams()){
            if(param.getName() == nombre){
                existe =  true;
            }
        }
        if(existe == false){
            System.out.println("La variable "+ nombre +" aun no ha sido declarada!");
        }
        return existe;
    }

    Analizador s;
    parser(Analizador s){ this.s=s; }
:}

//init with {: s.init(); :};
scan with {: return s.next_token(); :};

/*---------------------------declaraciones------------------------*/

terminal REXC, OR, AND, MULT, LPAREN , RPAREN, 
            MENOS, MAS, ASIG, LBRACKET, RBRACKET, LBRACE, RBRACE, 
             COMA, MENOR, MAYOR, 
            DIV, MENORIGUAL, MAYORIGUAL, EQUAL, NOTEQUAL, POTENCIA, 
            MODULO, INCREMENTO, DECREMENTO, NOT, IF, ELIF, ELSE, WHILE, DO, FOR, RETURN, BREAK, LEER, ESCRIBIR;

//terminal String letra, simbolo;
terminal String LITERAL_INT, LITERAL_FLOAT, LITERAL_BOOL, LITERAL_CHAR, LITERAL_STRING;
terminal String IDENTIFIER, DOLLAR, INT, FLOAT, STRING, CHAR, ARRAY, BOOL,MAIN;

non terminal  inicio, programa, main, funciones,
    expresion, opRelacional, operadorArit, operadorUnario, operadorLogico, expresionAritmetica, 
    expresionRelacional, expresionLogica, expresionRelLog, terminoLogico, 
    operandoArit, operandoRel, array, if, elif, while, doWhile, for, estructuraControl, return, 
    break, argumentos, llamaFuncion, asignacion, sentencia, bloque, parametros, declaraFuncion,
    tipo, declaraArray, declaraArrayAux, declaraVar, getValorArray, setValorArray, lectura, numerico, escritura;

    


non terminal igual, noIgual;
non terminal literales;
non terminal argumento;
non terminal else;
non terminal bloqueFunc;
non terminal bloqueMain;
terminal uminus;

//precedencia




precedence left MAS, MENOS;
precedence left MULT, DIV;
precedence right uminus;
precedence left  POTENCIA, MODULO;
precedence left AND, OR;
precedence nonassoc NOT, REXC;
precedence left DOLLAR;

precedence left CHAR, INT;
precedence left IDENTIFIER;
precedence left LPAREN,LBRACKET;



start with inicio;

inicio ::= programa:e {: RESULT = e; :};


programa ::= main {: System.out.println("encontro main"); :}
    | funciones main {: System.out.println("encontro funciones main"); :}
    | main funciones {: System.out.println("encontro main funciones"); :}
    | funciones main funciones {: System.out.println("encontro funciones main funciones"); :}
    ;


main ::= INT:t MAIN:e LPAREN RPAREN LBRACE bloqueMain RBRACE {: System.out.println("encontro main"); 
        Boolean existe = false;
        for (Function f : functions) {
            if (f.getName().equals(e)) {
                System.out.println("Function " + e + " ya fue declarada");
                existe = true;
            }
        }
        if(existe == false){
            Function newFunction = new Function(e, listaParametros.getParams());
            functions.add(newFunction);

            /* Create a new symbol table object for the function */
            SymbolTable symbolTable = new SymbolTable(e);

            /* Add the function parameters to the symbol table */
            for (FormalParameter param : listaParametros.getParams()) {
                symbolTable.addSymbol(param.getName(), param.getType());
            }
            for (FormalParameter par : listaVariables.getParams()) {
                if (symbolTable.containsSymbol( par.getName())) {
                    System.out.println("Symbol " +  par.getName() + " already declared in this function");
                }else{
                    symbolTable.addSymbol(par.getName(), par.getType());
                    System.out.println("declaracion -> " + par.getName()+"tipo "+par.getType());
                }
            }
            

            //List<SymbolTable> symbolTables = (List<SymbolTable>) getSymbolTableStack().peek();
             getSymbolTableStack().push(symbolTable);
            
        }

        listaVariables  = new FormalParameterList();
        listaParametros  = new FormalParameterList();
       
        :};

bloqueMain ::= bloque ;

funciones ::= funciones declaraFuncion
    | declaraFuncion
    ;


expresion ::= expresionRelLog{: System.out.println("encontro expresionRellogica"); :}
    |expresionAritmetica {: System.out.println("encontro expresionAritmetica"); :}
    ;


operadorArit::= MAS
    | MENOS {: System.out.println("encontro MENOS"); :}
    | MULT 
    | POTENCIA 
    | DIV 
    | MODULO
    ;

opRelacional ::= MENOR
    | MENORIGUAL
    | MAYOR
    | MAYORIGUAL
    | EQUAL {: System.out.println("encontro EQUAL"); :}
    | NOTEQUAL {: System.out.println("encontro NOTEQUAL"); :}
    ;

operadorUnario ::= MENOS numerico  {:System.out.println("encontro unario menos"); :} %prec uminus
    | INCREMENTO IDENTIFIER {: System.out.println("encontro unario incremento "); :}
    | DECREMENTO IDENTIFIER {: System.out.println("encontro unario decremento"); :}
    ;



operadorLogico ::= AND
    |OR {: System.out.println("encontro logico or "); :}
    |REXC
    |NOT
    ;

expresionAritmetica ::= operandoArit {: System.out.println("encontro operandoArit"); :}
    | expresionAritmetica operadorArit operandoArit {: System.out.println("encontro expresionAritmetica operadorArit operandoArit"); :}
    ;

expresionRelLog ::= expresionRelacional {: System.out.println("encontro expresionRelacional"); :}
    | expresionLogica {: System.out.println("encontro expresionLogica"); :}
    ;

expresionRelacional ::= operandoRel opRelacional operandoRel {: System.out.println("encontro operandoRel opRelacional operandoRel"); :} ;

expresionLogica ::= terminoLogico {: System.out.println("encontro terminoLogico"); :}
    | expresionLogica operadorLogico terminoLogico {: System.out.println("encontro expresionLogica operadorLogico terminoLogico"); :}
    ;



terminoLogico ::= LITERAL_BOOL {: System.out.println("encontro LITERAL_BOOL"); :}
    | LPAREN expresionRelacional RPAREN
    ;

operandoArit ::= IDENTIFIER {: System.out.println("encontro operandoArit       identifier"); :}
    | LITERAL_STRING {: System.out.println("encontro operandoArit       LITERAL_STRING"); :}
    | LITERAL_INT       {: System.out.println("encontro operandoArit       LITERAL_INT"); :}
    | LITERAL_FLOAT     {: System.out.println("encontro operandoArit       LITERAL_FLOAT"); :}
    | LITERAL_CHAR    {: System.out.println("encontro operandoArit       LITERAL_CHAR"); :}
    | llamaFuncion      {: System.out.println("encontro llamafuncion"); :}
    | operadorUnario    {: System.out.println("encontro operandoArit  operadorUnarioxxx"); :}
    | LBRACKET array RBRACKET {: System.out.println("encontro operandoArit array"); :}
    | getValorArray
    ;

operandoRel ::= operandoArit 
    | LITERAL_BOOL
    | LPAREN expresionAritmetica RPAREN
    ;

literales ::= LITERAL_INT
    |LITERAL_FLOAT
    |LITERAL_BOOL
    |LITERAL_STRING
    |LITERAL_CHAR
    |LBRACKET array RBRACKET
    ;

array ::= expresion  
    | array COMA expresion
    ;

//estructuras de control


if ::= IF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE {: System.out.println("encontro if"); :}
    ;

elif ::= ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE {: System.out.println("encontro elif"); :}
    | elif ELIF LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE {: System.out.println("encontro elif elif"); :}
    ;

else ::= ELSE LBRACE bloque RBRACE {: System.out.println("encontro else"); :};

while ::= WHILE LPAREN expresionRelLog RPAREN LBRACE bloque RBRACE 
    {: System.out.println("encontro while"); :};

doWhile ::= DO LBRACE bloque RBRACE WHILE LPAREN expresionRelLog RPAREN DOLLAR
    {: System.out.println("encontro dowhile"); :};

for ::= FOR LPAREN declaraVar DOLLAR expresionRelLog DOLLAR expresion  RPAREN LBRACE bloque RBRACE 
    {: System.out.println("encontro for"); :}
    ;

estructuraControl ::=  if {: System.out.println("encontro if"); :}
    |if elif {: System.out.println("encontro if elif"); :}
    |if elif else {: System.out.println("encontro if elif else"); :}
    |if  else {: System.out.println("encontro if else"); :}
    | while {: System.out.println("encontro while"); :}
    | doWhile 
    | for {: System.out.println("encontro for"); :}
    ;

return ::= RETURN expresion {: System.out.println("encontro  RETURN expresion"); :}
    |RETURN {: System.out.println("encontro RETURN"); :}
    ;

break ::= BREAK {: System.out.println("encontro BREAK"); :};

argumento ::= IDENTIFIER {: System.out.println("encontro IDENTIFIER"); :}
    | literales {: System.out.println("encontro literales"); :}
    ;

argumentos ::= argumento {: System.out.println("encontro argumento"); :}
    | argumentos COMA expresion {: System.out.println("encontro argumentos COMA expresion"); :}
    ;

llamaFuncion ::= IDENTIFIER  LPAREN RPAREN {: System.out.println("encontro IDENTIFIER  LPAREN RPAREN"); :}
    | IDENTIFIER LPAREN argumentos RPAREN {: System.out.println("encontro IDENTIFIER LPAREN argumentos RPAREN"); :}
    | lectura {: System.out.println("encontro lectura"); :}
    | escritura {: System.out.println("encontro escritura"); :}
    ;


asignacion ::= IDENTIFIER:e ASIG expresion {: System.out.println("encontro IDENTIFIER ASIG expresion");
    existeSimbolo(e);
 :} ;

sentencia ::= asignacion DOLLAR  {: System.out.println("encontro asignacion"); :}
    //| funciones main
    | estructuraControl {: System.out.println("encontro estructuracontrol"); :}
    | expresion DOLLAR {: System.out.println("encontro expresion DOLLAR"); :}
    | declaraArray DOLLAR {: System.out.println("encontro declara DOLLAR"); :}
    | declaraVar DOLLAR {: System.out.println("encontro sentencia -> declaraVar"); :}
    | return DOLLAR {: System.out.println("encontro return dollar"); :}
    | break DOLLAR {: System.out.println("encontro break DOLLAR"); :}
    | getValorArray DOLLAR {: System.out.println("encontro getValorArray DOLLAR"); :}
    | setValorArray DOLLAR {: System.out.println("encontro setValorArray DOLLAR"); :}
    | error DOLLAR {: System.out.println("#######error encontrado###############"); :}
    ;

bloque ::= sentencia {: System.out.println("encontro sentencia"); :}
    | bloque sentencia {: System.out.println("encontro bloque sentencia"); :}
    ;

parametros ::= tipo:t IDENTIFIER:i {: System.out.println("encontro tipo IDENTIFIER"); listaParametros.addParameter(new FormalParameter(i,(String) t));:}
    | parametros:p COMA tipo:t IDENTIFIER:i {: System.out.println("encontro parametros COMA tipo IDENTIFIER");listaParametros.addParameter(new FormalParameter(i,(String) t));:}
    ;

declaraFuncion ::= tipo IDENTIFIER:e LPAREN parametros RPAREN LBRACE bloqueFunc RBRACE 
        {: System.out.println("encontro tipo IDENTIFIER LPAREN parametros RPAREN LBRACE bloque RBRACE       "+e);
        Boolean existe = false;
        for (Function f : functions) {
            if (f.getName().equals(e)) {
                System.out.println("Function " + e + " ya fue declarada");
                existe = true;
            }
        }
        if(existe == false){
            Function newFunction = new Function(e, listaParametros.getParams());
            functions.add(newFunction);

            /* Create a new symbol table object for the function */
            SymbolTable symbolTable = new SymbolTable(e);

            /* Add the function parameters to the symbol table */
            for (FormalParameter param : listaParametros.getParams()) {
                symbolTable.addSymbol(param.getName(), param.getType());
            }
            for (FormalParameter par : listaVariables.getParams()) {
                if (symbolTable.containsSymbol( par.getName())) {
                    System.out.println("Symbol " +  par.getName() + " already declared in this function");
                }else{
                    symbolTable.addSymbol(par.getName(), par.getType());
                    System.out.println("declaracion -> " + par.getName()+"tipo "+par.getType());
                }
            }
            

            //List<SymbolTable> symbolTables = (List<SymbolTable>) getSymbolTableStack().peek();
             getSymbolTableStack().push(symbolTable);
            
        }

        listaVariables  = new FormalParameterList();
        listaParametros  = new FormalParameterList();
       
        :}
    | tipo IDENTIFIER LPAREN RPAREN LBRACE bloqueFunc RBRACE {: System.out.println("encontro tipo IDENTIFIER LPAREN RPAREN LBRACE bloque RBRACE"); :}
    ;

bloqueFunc ::= bloque;// {: popSymbolTable(); :};

tipo ::= INT:e {: System.out.println("encontro int--------"+e);RESULT = e;:}
    | CHAR:e {: System.out.println("encontro char"); RESULT = e;:}
    |FLOAT:e {: System.out.println("encontro FLOAT"); RESULT = e;:}
    |STRING:e {: System.out.println("encontro string"); RESULT = e;:}
    |ARRAY:e {: System.out.println("encontro array"); RESULT = e;:}
    |BOOL:e {: System.out.println("encontro bool");RESULT = e; :}
    ;

declaraArray ::=  INT IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR{: System.out.println("encontro  INT IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR"); :}
    |   CHAR IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR {: System.out.println("encontro CHAR IDENTIFIER LBRACKET LITERAL_INT RBRACKET DOLLAR"); :}
    ;

declaraArrayAux ::= LBRACKET LITERAL_INT RBRACKET {: System.out.println("encontro LBRACKET LITERAL_INT RBRACKET"); :}
    ;

declaraVar ::= INT:t IDENTIFIER:i ASIG expresion {: System.out.println("encontro INT IDENTIFIER ASIG expresion"); 
    /* Get the current symbol table for the function */
    //SymbolTable symbolTable = (SymbolTable) getSymbolTableStack().peek();

    /* Check if the symbol has already been declared in this function */
    //if (symbolTable.containsSymbol(id)) {
    //    System.out.println("Symbol " + id + " already declared in this function");
    //}

    /* Add the symbol to the symbol table */
    //symbolTable.addSymbol(id, t);
    listaVariables.addParameter(new FormalParameter(i,(String) t));
 :}
    | CHAR IDENTIFIER  ASIG expresion {: System.out.println("encontro CHAR IDENTIFIER ASIG expresion");  :}
    | tipo IDENTIFIER declaraArrayAux ASIG expresion {: System.out.println("encontro tipo IDENTIFIER declaraArrayAux ASIG             ");  :}
    | tipo IDENTIFIER ASIG expresion {: System.out.println("encontro tipo IDENTIFIER ASIG expresion");  :}
    ;

getValorArray ::= IDENTIFIER declaraArrayAux {: System.out.println("encontro getValorArray"); :}
    ;

setValorArray ::= getValorArray ASIG expresion  {: System.out.println("encontro set valor array"); :} ;

lectura ::= LEER LPAREN numerico RPAREN {: System.out.println("encontro lectura"); :};

numerico ::= LITERAL_INT | LITERAL_FLOAT  {: System.out.println("encontro numerico"); :};

escritura ::= ESCRIBIR LPAREN expresion RPAREN {: System.out.println("encontro escribir"); :}; 


