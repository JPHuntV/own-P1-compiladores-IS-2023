
programa = main | funciones main | main funciones | funciones main funciones ;

main = "int" "main" "("")" "{" bloque "}";

funciones = funciones declaraFuncion
    | declaraFuncion
    | comentario;

numero = (-?)[1-9][0-9]* | 0 ;
letra = [a-zA-Z] ;
simbolo = "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "_" | "+" | "=" | "[" | "]" | "{" | "}" | ";" | ":" | "'" | '"' | "," | "." | "<" | ">" | "?" | "/" | "|" | "\";
identificador = [a-zA-Z_][a-zA-Z0-9_]*;


operando = identificador
    | numero 
    | llamaFuncion;



expresion =  expresionRelLog | termino (opSuma termino)* ;
termino = factor (opMult factor)*;
factor = operadorUnario? valor;


valor = intLiteral 
    | floatLiteral 
    | stringLiteral 
    | charLiteral 
    | boolLiteral 
    | identificador array? 
    | llamaFuncion;



opSuma = "+" | "-";
opMult = "*" | "**" | "/" | "~";
opRelacional = "<" | "<=" | ">" | ">=" | "==" boolLiteral? | "!="  boolLiteral?;
operadorArit = opSuma | opMult;

operadorUnario = "-" | "++" | "--";
operadorLogico = "^" | "#" | "!" | "not" ;

expresionAritmetica = operandoArit
    | expresionAritmetica operadorArit operandoArit;

expresionRelacional = operandoRel opRelacional operandoRel;

expresionLogica = terminoLogico
    | expresionLogica operadorLogico terminoLogico
    | terminoLogico operadorLogico expresionLogica;
expresionRelLog = expresionRelacional | expresionLogica;

terminoLogico  = operandoArit
    | boolLiteral 
    | "("expresionRelacional")" 
    | expresionRelacional;

operandoArit = identificador | intLiteral | floatLiteral | llamaFuncion;
operandoRel = operandoArit | "("expresionAritmetica")";


intLiteral = numero ;
floatLiteral = (((-?)[1-9][0-9]*) | 0) . [0-9]+ | 0.0;
stringLiteral = charLiteral | stringLiteral charLiteral ;
charLiteral = "'" letra "'" | "'" numero "'" | simbolo;
boolLiteral = "true" | "false" ;
array = expresion ("," expresion)* ;


if = "if" "("expresionRelLog")" "{" bloque "}"
    | "if" "("expresionRelLog")" "{" bloque "}" elif
    | "if" "("expresionRelLog")" "{" bloque "}" elif "else" "{" bloque "}"
    | "if" "("expresionRelLog")" "{" bloque "}" "else" "{" bloque "}";
elif = "elif" "("expresionRelLog")" "{" bloque "}"
    | elif "elif" "("expresionRelLog")" "{" bloque "}" ;

while = "while" "("expresionRelLog")" "{" bloque "}";

doWhile = "do" "{" bloque "}" "while" "("expresionRelLog")" "$";

for = "for" "(" declaraVar expresionRelLog "$" expresion ")" "{" bloque "}";


estructuraControl =  if
    | while 
    | doWhile 
    | for;


return = "return" expresion;
break = "break";

argumentos = expresion
    | argumentos "," expresion ;
llamaFuncion = identificador "(" ")" "$"?
    |identificador "(" argumentos ")" "$" ?
    |lectura
    | escritura;
asignacion = identificador "=" expresion "$";



sentencia = asignacion
    | llamaFuncion "$"
    | estructuraControl 
    | expresion "$"
    | expresionLogica
    | expresionRelacional
    | expresionRelLog
    | declaraVar "$"
    | return "$"?
    | break "$"
    | comentario;


bloque = sentencia | bloque sentencia | sentencia bloque;
parametros = tipo identificador
    | parametros "," tipo identificador;
declaraFuncion = tipo identificador "("parametros")" "{" bloque "}"
    | tipo identificador "(" ")" "{" bloque "}";


tipo = "int" 
    | "float" 
    | "string" 
    | "char" 
    | "array" 
    | "bool"
;

declaraArray = ("int"|"char") identificador declaraArrayAux "$";
declaraVar = tipo identificador declaraArrayAux? "=" expresion ;

getValorArray = identificador declaraArrayAux "$"?;
setValorArray = getValorArray "=" expresion ;

lectura = "leer" "(" numerico")" "$";
numerico = intLiteral | floatLiteral;
escritura = "escribir" "(" expresion ")" "$";

comentario = "@" stringLiteral | "/_" stringLiteral "_/";
